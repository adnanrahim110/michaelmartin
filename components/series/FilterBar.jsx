"use client";import {  Check,  ChevronDown,  ChevronLeft,  ChevronRight,  Filter,  Sparkles,  X,} from "lucide-react";import { useEffect, useRef, useState } from "react";import { Navigation } from "swiper/modules";import { Swiper, SwiperSlide } from "swiper/react";export default function FilterBar({  tags,  tag,  setTag,  sort,  setSort,  filtered,  q,  setQ,  setVisible,}) {  const [isDropdownOpen, setIsDropdownOpen] = useState(false);  const [swiperInstance, setSwiperInstance] = useState(null);  const [isBeginning, setIsBeginning] = useState(true);  const [isEnd, setIsEnd] = useState(false);  const dropdownRef = useRef(null);  const sortOptions = [    { value: "recent", label: "Most Recent" },    { value: "alpha", label: "A â€” Z" },  ];  const selectedOption = sortOptions.find((option) => option.value === sort);  const handleResetFilters = () => {    setTag("All");    setQ("");    setVisible(9);    if (swiperInstance) {      swiperInstance.slideTo(0, 300);    }  };  const handleCategorySelect = (selectedTag, slideIndex = null) => {    setTag(selectedTag);    setVisible(9);    if (selectedTag === "All" && swiperInstance) {      swiperInstance.slideTo(0, 300);    } else if (slideIndex !== null && swiperInstance) {      const targetIndex = slideIndex + 1;      swiperInstance.slideTo(targetIndex, 300);    }  };  useEffect(() => {    if (tag === "All" && swiperInstance && !swiperInstance.isBeginning) {      swiperInstance.slideTo(0, 300);    }  }, [tag, swiperInstance]);  useEffect(() => {    function handleClickOutside(event) {      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {        setIsDropdownOpen(false);      }    }    document.addEventListener("mousedown", handleClickOutside);    return () => document.removeEventListener("mousedown", handleClickOutside);  }, []);  return (    <div className="mt-8 relative w-full">      <div className="bg-gradient-to-br from-white/90 via-white/70 to-white/50 dark:from-gray-900/90 dark:via-gray-900/70 dark:to-gray-900/50 backdrop-blur-xl rounded-3xl border border-white/20 dark:border-gray-800/50 shadow-2xl shadow-black/5 dark:shadow-black/20 w-full">        <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-pink-500/5 opacity-50"></div>        <div className="absolute top-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-white/20 to-transparent"></div>        <div className="relative p-4 md:p-6">          <div className="flex flex-col xl:flex-row xl:items-start xl:justify-between gap-6 w-full">            <div className="flex-1 space-y-6 w-full min-w-0">              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">                <div className="flex items-center gap-3">                  <div className="flex items-center gap-3">                    <div className="relative">                      <div className="w-10 h-10 rounded-2xl bg-gradient-to-br from-blue-500/20 to-purple-500/20 dark:from-blue-400/20 dark:to-purple-400/20 flex items-center justify-center backdrop-blur-sm">                        <Filter className="w-5 h-5 text-blue-600 dark:text-blue-400" />                      </div>                      <div className="absolute -top-1 -right-1 w-3 h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full opacity-80 animate-pulse"></div>                    </div>                    <div>                      <h3 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center gap-2">                        Categories                        <Sparkles className="w-4 h-4 text-yellow-500 animate-pulse" />                      </h3>                      <p className="text-xs leading-tight text-gray-500 dark:text-gray-400">                        Filter by collection type                      </p>                    </div>                  </div>                </div>                <div className="flex flex-col sm:flex-row items-start sm:items-end gap-4 xl:flex-shrink-0">                  <div className="flex items-center gap-2">                    <div className="px-4 py-2 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/30 dark:to-indigo-900/30 rounded-full border border-blue-200/50 dark:border-blue-800/50">                      <span className="text-sm font-medium text-blue-700 dark:text-blue-300">                        {filtered.length}{" "}                        {filtered.length === 1 ? "work" : "works"} found                      </span>                    </div>                  </div>                  {(tag !== "All" || q.trim()) && (                    <button                      onClick={handleResetFilters}                      className="flex items-center gap-3 px-4 py-2.5 bg-red-50 dark:bg-red-900/20 hover:bg-red-100 dark:hover:bg-red-900/30 border border-red-200/50 dark:border-red-800/50 rounded-2xl text-sm font-medium text-red-600 dark:text-red-400 transition-all duration-200 group hover:scale-105 active:scale-95"                    >                      <X className="w-4 h-4 group-hover:rotate-90 transition-transform duration-200" />                      Reset filters                    </button>                  )}                  <div className="flex items-center justify-center">                    <span className="inline-block rounded-l-2xl px-2.5 py-3 bg-gray-900 border border-r-0 border-gray-700/50 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">                      Sort Order                    </span>                    <div className="relative" ref={dropdownRef}>                      <button                        onClick={() => setIsDropdownOpen(!isDropdownOpen)}                        className="flex items-center justify-between gap-4 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-gray-200/50 dark:border-gray-700/50 text-gray-700 dark:text-gray-300 p-2.5 rounded-r-2xl text-sm font-semibold cursor-pointer hover:bg-white/90 dark:hover:bg-gray-800/90 hover:border-gray-300/60 dark:hover:border-gray-600/60 transition-all duration-300 outline-none focus:border-blue-500/50 shadow-lg hover:shadow-xl active:scale-95 min-w-36"                      >                        <span>{selectedOption?.label}</span>                        <ChevronDown                          className={`w-5 h-5 text-gray-400 transition-all duration-300 ${                            isDropdownOpen ? "rotate-180 text-blue-500" : ""                          }`}                        />                      </button>                      {isDropdownOpen && (                        <div className="absolute top-full mt-3 left-0 right-0 bg-white/95 dark:bg-gray-800/95 backdrop-blur-xl border border-gray-200/50 dark:border-gray-700/50 rounded-2xl shadow-2xl shadow-gray-900/20 dark:shadow-gray-900/40 z-50 overflow-hidden animate-fade-in">                          {sortOptions.map((option, index) => (                            <button                              key={option.value}                              onClick={() => {                                setSort(option.value);                                setVisible(9);                                setIsDropdownOpen(false);                              }}                              className={`w-full flex items-center justify-between px-3 py-2.5 text-sm font-semibold transition-all duration-200 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100/50 dark:hover:from-gray-700/50 dark:hover:to-gray-600/30 ${                                sort === option.value                                  ? "bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/30 dark:to-indigo-900/20 text-blue-600 dark:text-blue-400"                                  : "text-gray-700 dark:text-gray-300"                              }`}                              style={{                                animationDelay: `${index * 50}ms`,                              }}                            >                              <span>{option.label}</span>                              {sort === option.value && (                                <Check className="w-5 h-5 text-blue-600 dark:text-blue-400 animate-bounce" />                              )}                            </button>                          ))}                        </div>                      )}                    </div>                  </div>                </div>              </div>              <div className="bg-gray-900 rounded-2xl flex items-center relative w-full min-h-14 border border-gray-700/30 shadow-inner overflow-hidden px-16 select-none">                <button                  className={`absolute top-0 left-0 category-prev-btn size-14 shrink-0 flex items-center justify-center transition-all duration-200 border-r border-gray-200/50 dark:border-gray-600/50 ${                    isBeginning                      ? "bg-gray-900 cursor-not-allowed"                      : "bg-gray-700/80 hover:bg-gray-700"                  }`}                  disabled={isBeginning}                >                  <ChevronLeft                    className={`size-8 transition-colors duration-200 ${                      isBeginning ? "text-gray-500" : "text-gray-300"                    }`}                  />                </button>                {!isBeginning && (                  <div className="absolute top-0 left-14 h-full w-16 bg-gradient-to-r from-20% to-100% from-gray-900 to-transparent pointer-events-none z-[2]" />                )}                {!isEnd && (                  <div className="absolute top-0 right-14 h-full w-16 bg-gradient-to-l from-20% to-100% from-gray-900 to-transparent pointer-events-none z-[2]" />                )}                <Swiper                  modules={[Navigation]}                  slidesPerView="auto"                  spaceBetween={8}                  allowTouchMove={true}                  navigation={{                    prevEl: ".category-prev-btn",                    nextEl: ".category-next-btn",                  }}                  onSwiper={(swiper) => {                    setSwiperInstance(swiper);                    setIsBeginning(swiper.isBeginning);                    setIsEnd(swiper.isEnd);                  }}                  onSlideChange={(swiper) => {                    setIsBeginning(swiper.isBeginning);                    setIsEnd(swiper.isEnd);                  }}                  className="w-full categories-swiper"                >                  <SwiperSlide style={{ width: "auto" }}>                    <button                      onClick={() => handleCategorySelect("All")}                      className={[                        "relative px-5 py-2.5 rounded-xl text-sm font-semibold transition-all duration-300 group overflow-hidden border whitespace-nowrap",                        tag === "All"                          ? "bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-500 text-white border-transparent"                          : "bg-gray-700/80 border-gray-200/50 dark:border-gray-600/50 text-gray-700 dark:text-gray-300 hover:bg-white dark:hover:bg-gray-700 hover:border-gray-300/60 dark:hover:border-gray-500/60",                      ].join(" ")}                    >                      <span className="relative z-10">All</span>                      {tag !== "All" && (                        <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-indigo-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>                      )}                      {tag === "All" && (                        <div className="absolute inset-0 bg-white/10 animate-pulse"></div>                      )}                    </button>                  </SwiperSlide>                  {tags                    .filter((t) => t !== "All")                    .map((t, index) => {                      const active = tag === t;                      return (                        <SwiperSlide key={t} style={{ width: "auto" }}>                          <button                            onClick={() => handleCategorySelect(t, index)}                            className={[                              "relative px-5 py-2.5 rounded-xl text-sm font-semibold transition-all duration-300 group overflow-hidden border whitespace-nowrap",                              active                                ? "bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-500 text-white border-transparent"                                : "bg-gray-700/80 border-gray-200/50 dark:border-gray-600/50 text-gray-700 dark:text-gray-300 hover:bg-white dark:hover:bg-gray-700 hover:border-gray-300/60 dark:hover:border-gray-500/60",                            ].join(" ")}                            style={{                              animationDelay: `${index * 30}ms`,                            }}                          >                            <span className="relative z-10">{t}</span>                            {!active && (                              <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-indigo-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>                            )}                            {active && (                              <div className="absolute inset-0 bg-white/10 animate-pulse"></div>                            )}                          </button>                        </SwiperSlide>                      );                    })}                </Swiper>                <button                  className={`absolute top-0 right-0 category-next-btn size-14 shrink-0 flex items-center justify-center transition-all duration-200 border-l border-gray-200/50 dark:border-gray-600/50 ${                    isEnd                      ? "bg-gray-900 cursor-not-allowed"                      : "bg-gray-700/80 hover:bg-gray-700"                  }`}                  disabled={isEnd}                >                  <ChevronRight                    className={`size-8 transition-colors duration-200 ${                      isEnd ? "text-gray-400" : "text-gray-300"                    }`}                  />                </button>              </div>            </div>          </div>        </div>      </div>    </div>  );}