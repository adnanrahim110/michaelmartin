const https = require('https');const fs = require('fs');const path = require('path');const { songs } = require('../constants/index.js');function getVideoTitle(videoId) {  return new Promise((resolve) => {    const options = {      hostname: 'www.youtube.com',      path: `/watch?v=${videoId}`,      method: 'GET',      headers: {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'      }    };    const req = https.request(options, (res) => {      let data = '';      res.on('data', (chunk) => {        data += chunk;      });      res.on('end', () => {        try {          let titleMatch = data.match(/<title>([^<]+)<\/title>/);          if (titleMatch) {            let title = titleMatch[1];            title = title.replace(/ - YouTube$/, '');            resolve(title);            return;          }          titleMatch = data.match(/<meta property="og:title" content="([^"]+)"/);          if (titleMatch) {            resolve(titleMatch[1]);            return;          }          titleMatch = data.match(/<meta name="title" content="([^"]+)"/);          if (titleMatch) {            resolve(titleMatch[1]);            return;          }          resolve(`Video ${videoId}`);        } catch (error) {          console.error(`Error parsing title for ${videoId}:`, error);          resolve(`Video ${videoId}`);        }      });    });    req.on('error', (error) => {      console.error(`Error fetching ${videoId}:`, error);      resolve(`Video ${videoId}`);    });    req.setTimeout(10000, () => {      console.error(`Timeout for ${videoId}`);      req.destroy();      resolve(`Video ${videoId}`);    });    req.end();  });}async function updateAllTitles() {  console.log('Starting to fetch titles for all videos...');  const updatedSongs = [];  for (let i = 0; i < songs.length; i++) {    const song = songs[i];    console.log(`Fetching title ${i + 1}/${songs.length}: ${song.id}`);    const title = await getVideoTitle(song.id);    console.log(`  -> "${title}"`);    updatedSongs.push({      ...song,      title: title    });    await new Promise(resolve => setTimeout(resolve, 2000));  }  console.log('\nAll titles fetched!');  const constantsPath = path.join(__dirname, '../constants/index.js');  const currentContent = fs.readFileSync(constantsPath, 'utf8');  const songsArrayString = `export const songs = ${JSON.stringify(updatedSongs, null, 2)};`;  const updatedContent = currentContent.replace(    /export const songs = \[[\s\S]*?\];/,    songsArrayString  );  fs.writeFileSync(constantsPath, updatedContent, 'utf8');  console.log('Constants file updated successfully!');  return updatedSongs;}if (require.main === module) {  updateAllTitles().catch(console.error);}module.exports = { updateAllTitles, getVideoTitle };